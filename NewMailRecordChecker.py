# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NewmailUi.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import sys
import os
import csv
import multiprocessing
import threading
class Ui_MainWindow(object):
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(140, 300, 401, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(580, 300, 161, 31))
        self.checkBox.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.checkBox.setObjectName("checkBox")
        self.checkBox.stateChanged.connect(self.file_open) 
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(310, 390, 131, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.checklookup)
        #self.label = QtWidgets.QLabel(self.centralwidget)
        #self.label.setGeometry(QtCore.QRect(260, 30, 231, 221))
        #self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.file_open)
        self.menuFile.addAction(self.actionOpen)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.checkBox.setToolTip(_translate("MainWindow", "To search multiple email"))
        self.checkBox.setText(_translate("MainWindow", "Search Multiple email"))
        self.pushButton.setShortcut(_translate("MainWindow", "Return"))
        self.pushButton.setToolTip(_translate("MainWindow", "To search a single email"))
        self.pushButton.setText(_translate("MainWindow", "Search"))
        #self.label.setText(_translate("MainWindow", "<html><head/><body><p><img src=\":/newPrefix/logo.png\"/></p></body></html>"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))

    def checklookup(self): 
       txt=self.lineEdit.text()
       def fun(txt,self):
           cmd='python .\lookup.py '
           cmd=cmd+txt
           os.system(cmd)
           self.pushButton.show()
       thread = threading.Thread(target=fun,args=(txt,self,))
       thread.daemon = True
       thread.start()
       self.pushButton.hide()
    def file_open(self): 
           try:
               file_dialog = QFileDialog.getOpenFileName()
               file_name = file_dialog[0]
               with open(file_name, mode ='r')as file:
                   # reading the CSV file
                   flag=self.checkBox.isChecked()
                   print(flag)
                   csvFile = csv.reader(file)
                   if flag:
                       # displaying the contents of the CSV file
                       def fun2(txt):
                        cmd='python .\lookup.py '
                        cmd=cmd+txt
                        os.system(cmd)
                       for lines in csvFile:
                        thread = threading.Thread(target=fun2,args=(lines[0],))
                        thread.daemon = True
                        thread.start()
                           
                   else:
                        print("Pls check the box and Re-open the file")
           except FileNotFoundError:
               print("No file Selected.")
       
#import image_rc


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    thread = threading.Thread(target=ui.setupUi(MainWindow))
    thread.daemon = True
    thread.start()
    #ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
